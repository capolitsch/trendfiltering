% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict.cv_tf}
\alias{predict.cv_tf}
\alias{predict.sure_tf}
\title{Evaluate an optimized trend filtering estimate}
\usage{
\method{predict}{cv_tf}(
  obj,
  loss_func = "WMAE",
  lambda_choice = c("lambda_min", "lambda_1se"),
  x_eval,
  nx_eval
)

\method{predict}{sure_tf}(obj, lambda_choice = c("lambda_min", "lambda_1se"), x_eval, nx_eval)
}
\arguments{
\item{obj}{An object of class '\code{\link[=cv_trendfilter]{cv_tf}}' or
'\code{\link[=sure_trendfilter]{sure_tf}}'.}

\item{loss_func}{(For class '\code{\link[=cv_trendfilter]{cv_tf}}' only) A string or
index specifying which cross validation error curve stored within the
'\code{\link[=cv_trendfilter]{cv_tf}}' object will be used to optimize the trend
filtering hyperparameter. Run \code{names(obj$loss_funcs)} to see the available
options. Defaults to \code{loss_func = "WMAE"}.}

\item{lambda_choice}{One of \code{c("lambda_min", "lambda_1se")}. The choice of
hyperparameter that is used for optimized trend filtering estimate. Defaults
to \code{lambda_choice = "lambda_min"}.
\itemize{
\item{\code{"lambda_min"}}: The hyperparameter value that minimizes the cross
validation error curve.
\item{\code{"lambda_1se"}}: The largest hyperparameter value with a cross
validation error within 1 standard error of the minimum cross validation
error. This choice therefore favors simpler (i.e. smoother) trend filtering
estimates.
}}

\item{x_eval}{A grid of inputs to evaluate the optimized trend filtering
estimate on. Defaults to the observed values \code{x} when nothing is passed.}

\item{nx_eval}{Integer. If passed, overrides \code{x_eval} with
\code{x_eval = seq(min(x), max(x), length = nx_eval)}.}
}
\value{
An object of class '\code{pred_tf}'. This is a list with the following
elements:
\describe{
\item{x_eval}{Input grid that the optimized trend filtering estimate was
evaluated on.}
\item{tf_estimate}{The optimized trend filtering estimate, evaluated at
\code{x_eval}.}
\item{lambdas}{Vector of hyperparameter values evaluated in the grid search
(always returned in descending order).}
\item{edfs}{Vector of effective degrees of freedom for all trend filtering
estimators fit during validation.}
\item{errors}{Vector of hyperparameter validation errors, obtained either via
SURE or cross validation.}
\item{se_errors}{Standard errors for \code{errors}.}
\item{loss_func}{('\code{cv_tf}' only) A string or index designating which cross
validation loss function was selected as the metric with respect to which the
trend filtering hyperparameter would be optimized.}
\item{lambda_opt}{The optimal hyperparameter value, as defined by
\code{lambda_choice} (and \code{loss_func} if \code{class(obj) = "cv_tf"}).}
\item{edf_opt}{Number of effective degrees of freedom in the trend filtering
estimator with hyperparameter \code{lambda_opt}.}
\item{i_opt}{The index of \code{lambda_opt} within \code{lambdas}.}
\item{tf_model}{A list of objects that is used internally by other functions
that operate on the '\code{pred_tf}' object.}
}
}
\description{
Evaluate an optimized trend filtering object on a grid of input values. The
\code{predict} function can be called on an object of class
'\code{\link[=cv_trendfilter]{cv_tf}}' or '\code{\link[=sure_trendfilter]{sure_tf}}'. The
\code{lambda_choice} argument (and the \code{loss_func} argument, for
'\code{\link[=cv_trendfilter]{cv_tf}}' objects) should be used to specify the
desired method for optimizing the trend filtering hyperparameter.
}
\details{
The motivation for using \code{lambda_choice = "lambda_1se"} is essentially
Occam's razor: the two models yield results that are quantitatively very
close, so we favor the simpler model. See Section 7.10 of
\href{https://web.stanford.edu/~hastie/Papers/ESLII.pdf}{Hastie, Tibshirani, and Friedman (2009)} for more details on the
"one-standard-error rule".
}
\examples{
data(eclipsing_binary)
head(EB)

cv_tf <- cv_trendfilter(
  x = EB$phase,
  y = EB$flux,
  weights = 1 / EB$std_err^2,
  optimization_params = list(
    max_iter = 1e4,
    obj_tol = 1e-6,
    thinning = TRUE
  )
)

pred_tf <- predict(
  cv_tf,
  loss_func = "MAE",
  lambda_choice = "lambda_1se",
  nx_eval = 1500L
)
}
\seealso{
\code{\link[=cv_trendfilter]{cv_trendfilter()}}, \code{\link[=sure_trendfilter]{sure_trendfilter()}}
}
